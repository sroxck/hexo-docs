{"meta":{"title":"鸭梨鸭梨呀-Sroxck","subtitle":"sroxck","description":"分享技术,个人生活,学习知识的场所,有鸭梨才能成长,有鸭梨才能进步","author":"Sroxck","url":"http://yalibook.com","root":"/"},"pages":[{"title":"关于小站","date":"2020-02-26T14:04:08.000Z","updated":"2020-02-29T03:09:55.606Z","comments":true,"path":"about/index.html","permalink":"http://yalibook.com/about/index.html","excerpt":"","text":"本站用于记录工作与学习中遇到的问题和知识点,分享一些踩坑经历等等"},{"title":"examples","date":"2020-02-26T14:07:41.000Z","updated":"2020-02-26T14:07:41.702Z","comments":true,"path":"examples/index-1.html","permalink":"http://yalibook.com/examples/index-1.html","excerpt":"","text":""},{"title":"examples","date":"2020-02-26T14:06:28.000Z","updated":"2020-02-26T14:06:28.260Z","comments":true,"path":"examples/index.html","permalink":"http://yalibook.com/examples/index.html","excerpt":"","text":""},{"title":"faqs","date":"2020-02-26T14:05:38.000Z","updated":"2020-02-26T14:05:38.213Z","comments":true,"path":"faqs/index.html","permalink":"http://yalibook.com/faqs/index.html","excerpt":"","text":""}],"posts":[{"title":"FormData对象及作用","slug":"FormData对象及作用","date":"2020-03-03T12:58:05.000Z","updated":"2020-03-03T13:52:51.603Z","comments":true,"path":"2020/03/03/FormData对象及作用/","link":"","permalink":"http://yalibook.com/2020/03/03/FormData%E5%AF%B9%E8%B1%A1%E5%8F%8A%E4%BD%9C%E7%94%A8/","excerpt":"FormData的作用 模拟html表单 异步上传二进制文件 只能使用post请求","text":"FormData的作用 模拟html表单 异步上传二进制文件 只能使用post请求 FormData的使用 准备html表单 将html表单转换为FormData对象 new FormData(form) 提交表单对象 xhr.send(formData) FormData的实例方法 获取表单对象中属性的值 formData.get(‘key’) 注: key为表单name值 设置表单对象中属性的值 formData.set(‘key’,value) 注: key为表单name值 删除表单对象中属性的值 formData.delete(‘key’) 向表单对象中追加属性值 formData.append(‘key’, ‘value’) FormData二进制文件上传 node中使用formidable模块接收 12345678&lt;input type = \"file\" id = \"file\"/&gt;let file = document.querySelector('#file')file.onchange = function ()&#123; // 表单变化事件 let formData = new FormData() // 创建空表单对象 formData.append('attrName', this.files[0]) // this.files是文件列表数组 xhr.open('post', 'www.yalibook.com/upload') // 请求方式必须是post xhr.send(formData) // 将文件发送&#125;","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yalibook.com/tags/js/"}]},{"title":"详解Ajax(基础)","slug":"详解Ajax","date":"2020-03-03T11:57:51.000Z","updated":"2020-03-03T13:53:29.552Z","comments":true,"path":"2020/03/03/详解Ajax/","link":"","permalink":"http://yalibook.com/2020/03/03/%E8%AF%A6%E8%A7%A3Ajax/","excerpt":"Ajax是浏览器提供的一套api, 可以实现页面无刷新更新数据等操作 Ajax 应用场景 页面上拉更多数据 列表数据无刷新分页 表单项失去焦点数据验证 搜索框提示文字下拉列表 等等等…","text":"Ajax是浏览器提供的一套api, 可以实现页面无刷新更新数据等操作 Ajax 应用场景 页面上拉更多数据 列表数据无刷新分页 表单项失去焦点数据验证 搜索框提示文字下拉列表 等等等… Ajax 运行环境 Ajax技术需要运行在网站环境中才能生效,用本地文件的方式运行的ajax是无效的(暂不严谨) Ajax 实现方法 创建Ajax对象: let xhr =new XMLHttpRequest() 告诉Ajax请求地址和请求方式: xhr.open(&#39;请求方式&#39;, &#39;请求地址&#39;) 发送请求: xhr.send() 获取服务端的响应数据: 123xhr.onload = function () &#123; console.log(xhr.responseText) // responseText 是服务端响应回来的数据&#125; 接收到服务端响应后onload会自动触发 响应的数据格式:JSON​ 在项目中,服务端会返回JSON格式的数据,需要将JSON和HTML拼接,展示在页面中,在服务端数据都会被转换为字符串传输,使用JSON.parse解析JSON字符串 Ajaz 请求参数的传递 GET: 在xhr.open(&#39;get&#39;,&#39;地址?name=&#39;刘德华&#39;&amp;age=18)中拼接参数 POST: 请求方式必须设置请求内容的类型,在send中设置请求体 12xhr.setRequestHeaader(&#39;content-type&#39;,&#39;application&#x2F;-x-www-form-urlencoded&#39;)xhr.send(name&#x3D;&#39;刘德华&#39;&amp;age&#x3D;18) Ajax 请求参数的类型和格式 application/-x-www-form-urlencoded 例: name=&#39;刘德华&#39;&amp;age=18 application/json JSON先转换为JSON字符串(JSON.stringify()),才可以向服务端传输 注意: get请求只能提交1方法, 传统网站的表单也只能用1方法 Ajax 状态码 0: 请求未初始化 (还没调用open) 1: 请求已建立,但没发送 (没调用send) 2: 请求已发送 3: 请求正在处理,下载响应体 4: 响应体接收完毕 xhr.readyState属性获取状态码 xhr.onreadyStateChange事件: 状态码改变后触发的事件 onload事件不兼容IE低版本,需要兼容使用onreadyStateChange事件 判断readyState状态码是否为4即可 Ajax 错误处理 服务端返回的不是预期结果 判断HTTP状态码进行处理, xhr.status 获取HTTP状态码 服务端没有接收到请求,返回404状态码 检查请求地址 接受到请求,返回500系列状态码 服务端错误,找后端 网络中断,无法发送请求 会触发onerror事件,进行处理 Ajax IE缓存问题IE低版本中,存在缓存问题,即请求地址不变的情况下,只有第一次发送的ajax请求可以成功,后续发送的请求都会从缓存中获取结果 解决方法:在请求地址后面追加参数,保证每一次请求中的请求参数的值都不同 xhr.open(&#39;get&#39;,&#39;http://www.yalibook.com?t=&#39; + Math.random()) Ajax 全局事件 只要有ajax请求,对应的全局事件就会触发,可以用于制作loading等待效果 ajaxStart() 请求开始时触发 ajaxComplete() 请求完成时触发 Ajax 请求限制Ajax 只能向同源的地址发送请求","categories":[],"tags":[{"name":"ajax","slug":"ajax","permalink":"http://yalibook.com/tags/ajax/"}]},{"title":"git版本管理的基本使用","slug":"git版本管理的基本使用","date":"2020-03-03T11:40:52.000Z","updated":"2020-03-03T13:55:42.897Z","comments":true,"path":"2020/03/03/git版本管理的基本使用/","link":"","permalink":"http://yalibook.com/2020/03/03/git%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","excerpt":"git 基本知识 git仓库: 用于存放提交记录 暂存区: 临时存放被修改文件 工作目录: 被git管理的项目目录 git 使用前配置","text":"git 基本知识 git仓库: 用于存放提交记录 暂存区: 临时存放被修改文件 工作目录: 被git管理的项目目录 git 使用前配置 配置提交人姓名: git config --global user.name 提交人姓名 配置提交人邮箱: git config --global user.email 提交人邮箱 查看git配置信息: git config --list git 提交步骤 初始化git仓库: git init 查看文件状态: git status 添加文件到暂存区: git add 文件名 向仓库中提交代码: git commit -m 提交信息 查看提交代码: git log git 撤销 用暂存区文件,覆盖工作目录中的文件: git checkout 文件名 将文件从暂存区中删除: git rm --chached 文件名 将git仓库中指定的更新记录恢复出来,并覆盖暂存区和工作目录: git reset --hard 提交ID git 分支 主分支: master :git自动产生的一条分支 开发分支:develop: 作为开发的分支,基于mastar分支创建 功能分支:feature: 作为开发具体功能的分支,基于develop分支创建 git 分支命令 查看分支: git branch 创建分支: git branch 分支名称 切换分支: git checkout 分支名称 创建分支并切换到创建的分支: git checkout -b 分支名 合并分支: git merge 分支名 被合并分支名 删除分支:git branch -d 分支名 注意:合并分支后才可以删除,可以使用-D强制删除 暂时保存更改,独立于分支,在任何分支可用 存储临时改动: git stash 恢复改动: git stash pop git 忽略清单 .gitignore 文件中设置不需要被git管理的文件或文件夹","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://yalibook.com/tags/git/"}]},{"title":"JS的一些基础面试题(持续更新)","slug":"JS的一些基础面试题(持续更新)","date":"2020-03-02T12:38:06.000Z","updated":"2020-03-03T13:54:12.609Z","comments":true,"path":"2020/03/02/JS的一些基础面试题(持续更新)/","link":"","permalink":"http://yalibook.com/2020/03/02/JS%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/","excerpt":"JS基本数据类型有几种?都是哪些? 共6种(es6), String, Boolean, Number, Null, Undefined, Symbol","text":"JS基本数据类型有几种?都是哪些? 共6种(es6), String, Boolean, Number, Null, Undefined, Symbol","categories":[],"tags":[]},{"title":"JS中数组去重的几种常用方法","slug":"JS中数组去重的几种常用方法","date":"2020-03-02T12:38:06.000Z","updated":"2020-03-03T13:54:21.150Z","comments":true,"path":"2020/03/02/JS中数组去重的几种常用方法/","link":"","permalink":"http://yalibook.com/2020/03/02/JS%E4%B8%AD%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/","excerpt":"利用ES6 Set数据结构去重123let arr = [1,2,3,1,2,3,'1','2','3'];let result = [...new Set(arr)];console.log(result); // [1, 2, 3, \"1\", \"2\", \"3\"] 思路:利用了ES6 Set数据结构中,值不能重复的特性,使用ES6扩展运算符将获得的Set数据放入数组中转换为普通数据,优点是简洁","text":"利用ES6 Set数据结构去重123let arr = [1,2,3,1,2,3,'1','2','3'];let result = [...new Set(arr)];console.log(result); // [1, 2, 3, \"1\", \"2\", \"3\"] 思路:利用了ES6 Set数据结构中,值不能重复的特性,使用ES6扩展运算符将获得的Set数据放入数组中转换为普通数据,优点是简洁 利用indexOf去重1234567891011let arr = [1,2,3,1,2,3,'1','2','3'];function unique(arr) &#123; let result = []; // 创建空的结果数组 for (var i = 0; i &lt; arr.length; i++) &#123; // 循环原数组, arr[i]就是当前项的值 if (result.indexOf(arr[i]) === -1) &#123; // 判断结果数组中存在不存在当前项的值 result.push(arr[i]) // 如果不存在, 说明结果数组中没有这个值,就追加进结果数组 &#125;// 有这个值,(重复了)就不会进入if,直接进行下一次循环 &#125; return result&#125;console.log (unique(arr)) // [1, 2, 3, \"1\", \"2\", \"3\"] 思路: 新建一个空的结果数组, for循环原数组, 判断结果数组中是否存在当前元素(indexOf: 在数组中查找具体值的索引,没找到返回-1), 不存在就将值放入结果数组,存在就不会进入if判断 利用includes去重1234567891011let arr = [1,2,3,1,2,3,'1','2','3'];function unique(arr) &#123; let result = []; // 创建空的结果数组 for (var i = 0; i &lt; arr.length; i++) &#123; // 循环原数组, arr[i]就是当前项的值 if (!result.includes(arr[i])) &#123; // 判断结果数组中存在不存在当前项的值 result.push(arr[i]) // 如果不存在, 说明结果数组中没有这个值,就追加进结果数组 &#125;// 有这个值,(重复了)就不会进入if,直接进行下一次循环 &#125; return result&#125;console.log (unique(arr)) // [1, 2, 3, \"1\", \"2\", \"3\"] 思路: 整体思路与利用indexOf相同,`includes的作用是查找数组中是否包含某个值,如果包含返回true 利用filter去重1234567let arr = [1,2,3,1,2,3,'1','2','3'];function unique(arr) &#123; arr.filter((item,index,arr) =&gt; &#123; arr.indexOf(item,0) === index &#125;)&#125;console.log (unique(arr)) // [1, 2, 3, \"1\", \"2\", \"3\"] 思路:","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yalibook.com/tags/js/"}]},{"title":"HTML与CSS的一些基础面试题(持续更新)","slug":"HTML与CSS的一些基础面试题(持续更新)","date":"2020-03-02T08:56:57.000Z","updated":"2020-03-03T13:54:08.255Z","comments":true,"path":"2020/03/02/HTML与CSS的一些基础面试题(持续更新)/","link":"","permalink":"http://yalibook.com/2020/03/02/HTML%E4%B8%8ECSS%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/","excerpt":"HTML5有哪些新特性?添加了canvas绘图新增了语义化标签 header , footer , section , nav , main , aside , article , video , audio 新增了本地存储","text":"HTML5有哪些新特性?添加了canvas绘图新增了语义化标签 header , footer , section , nav , main , aside , article , video , audio 新增了本地存储 localStorage , sessionStorage , websoket 表单控件 required , tel , url , time , search ,color..等等 如何解决HTML5标签的兼容问题? 使用 htmlshiv.js,引入后使用css将h5标签的display设置为block 如何关闭ios键盘首字母自动大写? 给需要关闭的input标签添加autocapitalize = off 移动端如何弹起数字键盘? 表单的type属性设置为tel Doctype的作用? 告诉浏览器文档使用的是那种html/xml标准 iframe 的优缺点? 优点: 可以重复调用,维护性好一些 缺点: 兼容性不好,浏览器历史无效,会阻塞页面onload事件,增加http请求 position的默认属性是什么? static 超出文本显示省略号? 使用overflow:hidden把超出部分隐藏 使用white-space:nowrap设置内容不换行 使用text-overflow:ellipsis设置超出内容显示省略号","categories":[],"tags":[]},{"title":"清除浮动最常用的几种方式","slug":"清除浮动最常用的几种方式","date":"2020-03-01T11:16:59.000Z","updated":"2020-03-03T13:54:44.494Z","comments":true,"path":"2020/03/01/清除浮动最常用的几种方式/","link":"","permalink":"http://yalibook.com/2020/03/01/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/","excerpt":"首先我们要知道为何要清除浮动 浮动的元素会脱离文档流,会导致父元素的高度塌陷,后面的元素挤压上来,影响页面布局.所以需要清除浮动","text":"首先我们要知道为何要清除浮动 浮动的元素会脱离文档流,会导致父元素的高度塌陷,后面的元素挤压上来,影响页面布局.所以需要清除浮动 清除浮动常用的几种方式额外标签法额外标签法是指在浮动的元素后面添加一个额外的标签,对标签的css属性设置clear:both即可清除浮动,缺点是添加了无意义的标签 设置父元素css属性 overflow:hidden给浮动元素的父元素设置overflow:hidden即可清除浮动 伪元素清除浮动12345.clearfix::after&#123; content:''; clear:both; display:table;&#125; 双伪元素清除浮动12345678910.clearfix::before,::after &#123; content:''; display:table;&#125;.clearfix::after &#123; clear:both;&#125;.clearfix &#123; zoom:1; // 兼容ie&#125; 额外拓展之BFC什么是BFC？BFC 全称为 块格式化上下文 (Block Formatting Context) 。 从这个概念里你能看出来什么吗？ 这个名字给我们的信息只有 “块” “格式化” “上下文” 。我们大概可以了解到这个东西是对上下文起作用的。 那里的上下文？？ HTML文档！ 它大概的作用，貌似是格式化上下文？？可能不是我们通常意义中的格式化。 我们没有从这个名字中得到太多有用的信息，仅仅知道它是一种功能，针对于 HTML文档 起作用。 那我们去看看官方是怎么解释的。 MDN： 一个块格式化上下文（block formatting context） 是Web页面的可视化CSS渲染出的一部分。它是块级盒布局出现的区域，也是浮动层元素进行交互的区域。 一个块格式化上下文由以下之一创建： 根元素或其它包含它的元素 浮动元素 (元素的 float 不是 none) 绝对定位元素 (元素具有 position 为 absolute 或 fixed) 内联块 (元素具有 display: inline-block) 表格单元格 (元素具有 display: table-cell，HTML表格单元格默认属性) 表格标题 (元素具有 display: table-caption, HTML表格标题默认属性) 具有overflow 且值不是 visible 的块元素， display: flow-root column-span: all 应当总是会创建一个新的格式化上下文，即便具有 column-span: all 的元素并不被包裹在一个多列容器中。 一个块格式化上下文包括创建它的元素内部所有内容，除了被包含于创建新的块级格式化上下文的后代元素内的元素。 块格式化上下文对于定位 (参见 float) 与清除浮动 (参见 clear) 很重要。定位和清除浮动的样式规则只适用于处于同一块格式化上下文内的元素。浮动不会影响其它块格式化上下文中元素的布局，并且清除浮动只能清除同一块格式化上下文中在它前面的元素的浮动。 我们发现一个什么问题！貌似看不懂哎！！ 为什么会产生这样的原因？？ 你能解释一下什么是桌子吗？？ 仔细想想，发现好像并不能合理的解释它。 BFC 也是如此，只有特性(功能)，没有定义。 BFC 特性(功能) 使 BFC 内部浮动元素不会到处乱跑； 和浮动元素产生边界。 使 BFC 内部的浮动元素不会到处乱跑 在正常的文档流中，块级元素是按照从上自下，内联元素从左到右的顺序排列的。 如果我给里面的元素一个 float 或者绝对定位，它就会脱离普通文档流中 此时如果我们还想让外层元素包裹住内层元素该如果去做？？ 让外层元素产生一个 BFC 。(产生 BFC 的方法 MDN 文档里有写) 这就是 BFC 的第一个作用：使 BFC 内部的浮动元素不会到处乱跑。 所以到底什么是BFC呢? 简单的来说：BFC就是一个css的一个布局概念，是一个独立的区域，是一个环境。 触发BFC的条件满足下列条件之一就可以触发BFC 1：根元素，即html元素2：float的值不为none3：overflow的值不为visible4：display的值为inline-block、table-cell、table-caption5：position的值为absolute或者fixed","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://yalibook.com/tags/css/"}]},{"title":"H5C3笔记","slug":"H5C3基础笔记","date":"2020-02-29T03:46:24.000Z","updated":"2020-03-03T13:53:57.780Z","comments":true,"path":"2020/02/29/H5C3基础笔记/","link":"","permalink":"http://yalibook.com/2020/02/29/H5C3%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/","excerpt":"记录了基础H5C3的一些新特性","text":"记录了基础H5C3的一些新特性 1. h5新标签header 头部标签 nav 导航标签 aside 侧边栏标签 section 块级标签 article 内容标签 audio 音频标签 footer 尾部标签 video 视频标签 2. input新增属性email 邮箱表单 tel 电话表单 number 数字表单 date 日期表单 url 网址表单 time 时间表单 moon 月份表单 search 搜索框 color 颜色选择器 3.表单新增属性required 设置此属性 必须填写内容才可以提交 placeholder 提示文本 autofocus 自动获取焦点 autocomplete 自动完成 属性默认是on off关闭 multiple 多选文件上传 4.C3选择器属性选择器 选中元素的属性,属性选择器权重为10 E[attr] E[attr=”value”] E[attr^=”value”] E[attr$=”value”] E[attr*=”value”] 结构伪类选择器 nth-child: 选择父元素中第n个子元素,伪类选择器,权重为10 E:frist-child E:last-child E:nth-child(n) E:nth-child(odd/even) E:nth-child(5n) 伪元素选择器 默认行内元素 必须填写content 权重为1 E::before E::after 5.过渡 transition过渡是CSS3中具有颠覆性的特征之一，我们可以为元素添加效果。 过渡动画：是从一个状态渐渐的过渡到另外一个状态 123456transition 简写:要过渡的属性 花费时间 运动曲线 何时开始transition: all 0.6s ease 0 all(所有属性) 0.6s(0.6秒) ease(平滑) 0(开始时间) 可省略后两项transition-property: 规定应用过渡的CSS属性的名称。transition-duration: 定义过渡效果花费的时间。默认是0。transition-timing-function: 过渡效果的时间曲线。默认是“ease\" 包括:linear：线性 ease-in: 由慢到快 ease-out: 由快到慢。transition-delay: 规定过渡效果何时开始。默认是0。 6.转换 transform位移 translate 指定对象2D位移。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0 translateX()：指定对象X轴的（水平方向）位移 translatY()：指定对象Y轴的（垂直方向）位移 缩放 scale 指定对象的2D缩放。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值 scalex()：指定对象X轴的（水平方向）缩放 scaley()：指定对象Y轴的（垂直方向）缩放 旋转 rotate 指定对象2D旋转。单位为度数(deg) 默认按中心点旋转 可以使用origin 改变中心点位置 旋转中心点origin 写法为transform-origin：该属性提供2个参数值。 如果提供两个，第一个用于横坐标（x），第二个用于纵坐标（y）。 如果只提供一个，该值将用于横坐标；纵坐标将默认为center可以写``left right top bottom ` transform示例代码12345位移 transform:translate(100px,100px) 水平移动100像素,垂直移动100像素 ---单位为像素缩放 transform:scale(1.1,1.1) 水平缩放1.1倍 垂直缩放1.1倍 ---单位为倍数旋转 transform:rotate(360deg) 顺时针360度旋转 ---单位为度数旋转中心点 transform-origin(right top) 以右上角为原点旋转 ---单位为方位也可以是像素倾斜 transform:skew(30deg) 倾斜30度 ---单位为度数 7.动画 animation 动画简写:animation：动画名称 花费时间 运动曲线 何时开始 播放次数 是否反方向 使用语法:先定义关键帧 然后调用 1234567891011121314151617181920212223242526272829303132定义动画 使用@keyframes@keyframes 动画名 &#123; 0%&#123; 动画开始状态 &#125; 100%&#123; 动画结束状态 &#125;&#125;可以使用from to @keyframes 动画名 &#123; from&#123; 动画开始状态 &#125; to&#123; 动画结束状态 &#125;&#125;动画调用animation-name:动画名(必填)animation-duration:动画持续时间(必填)animation-timing-function:速度曲线 常用属性 linear ease ease-out stepsanimation-iteration-count:动画次数 常用属性 infinite 无限animation-direction:逆向播放 常用属性 alternate 逆向animation-delay:延迟播放 单位s ms 时间单位animation-fill-mode:动画结束后的状态 常用属性forwards 停止在动画结束的位置 animation-play-status:paused 暂停动画(通常配合鼠标经过使用)动画属性简写:名字 时间 曲线 延迟 次数 逆向 结束状态速度曲线中 steps(number) 步数 用来控制完成动画需要多少步 8.3D转换 transform位移 translate3d​ translate3d(x,y,z) 可以向着z轴移动 近大远小 需要透视属性才能观察到 透视 perspective​ 单位px 就是视距 设置元素被查看位置的视图 旋转 rotate​ rotateX(deg) 沿着x轴旋转 ​ rotateY(deg) 沿着y轴旋转 ​ rotateZ(deg) 沿着z轴旋转 效果和rotate(deg)相似 ​ rotate3d(x,y,z,deg) 矢量旋转 3d呈现​ transform-style:perserve-3d 让子盒子保留3d效果 给父盒子加 9. 背景渐变 background:-webit-linear-gradient（渐变的起始位置，起始颜色，结束颜色） 例:background:-webit-linear-gradient(top,red,green) 从顶部开始 从红到绿的渐变 例:background:-webit-linear-gradient(left top,red,green) 从左上角开始 从红到绿的渐变 例:background:-webit-linear-gradient(top,red 0%,green 50%,blue 100%) 从顶部开始 开始是红色 到50%是绿色 最终是蓝色 10. 盒子透明 opacity opacity:0.5 盒子半透明,盒子内容,文本会透明 CSS1 rgba(0,0,0,.5) 背景半透明,背景透明.内容文字等不会透明 CSS3","categories":[],"tags":[]},{"title":"Vue项目优化和部署上线","slug":"Vue项目优化和部署上线","date":"2020-02-29T03:26:00.000Z","updated":"2020-03-03T13:54:28.985Z","comments":true,"path":"2020/02/29/Vue项目优化和部署上线/","link":"","permalink":"http://yalibook.com/2020/02/29/Vue%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E5%92%8C%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/","excerpt":"项目优化策略1. 生成打包报告打包时,为了直观的发现项目中存在的问题,可以在打包时生成打包报告,生成报告的方式有两种 通过命令行参数的形式生成报告 vue-cli-service build –report 通过可视化UI面板直接查看报告(推荐)","text":"项目优化策略1. 生成打包报告打包时,为了直观的发现项目中存在的问题,可以在打包时生成打包报告,生成报告的方式有两种 通过命令行参数的形式生成报告 vue-cli-service build –report 通过可视化UI面板直接查看报告(推荐) 2. 通过vue.config.js 修改 webpack的默认配置通过vue-cli 3.0 创建的项目,默认隐藏了所有webpack的配置项目,目的是为了屏蔽项目的配置过程 如果有需要修改webpack的需求,可以在项目根目录创建 vue.config.js,从而做自定义的配置 12345// vue.config.js基本格式module.exports = &#123; //选项&#125; 3.为开发模式和发布模式指定不同的打包入口默认情况下,vue项目的开发模式和发布模式,共用一个打包的入口文件,即 src/main.js 可以分离为2种模式 开发模式入口文件 src/main-dev.js 发布模式入口文件 src/main-prod.js 那么如何分离呢? 3.1 使用configureWebpack和chainWebpack在vue.config.js导出的配置对象中,新增configureWebpack或者chainWebpack来自定义Webpack打包配置 configureWebpack和chainWebpack 作用相同,修改的方式不同 1 chainWebpack 通过链式编程来修改Webpack配置 2 configureWebpack 通过操作对象的形式来修改Webpack配置 3.2 通过 chainWebpack 自定义打包入口代码示例 12345678910module.exports = &#123; chainWebpack: config =&gt; &#123; config.when(process.env.NODE_ENV === 'production', config =&gt; &#123; config.entry('app').clear().add('./src/main-prod.js') &#125;) config.when(process.env.NODE_ENV === 'development', config =&gt; &#123; config.entry('app').clear().add('./src/main-dev.js') &#125;) &#125;&#125; 4 .通过 externals 加载外部 CDN 资源​ 默认情况下，通过 import 语法导入的第三方依赖包，最终会被打包合并到同一个文件中，从而导致打包成功后，单文件体积过大的问题。 ​ 为了解决上述问题，可以通过 webpack 的 externals 节点，来配置并加载外部的 CDN 资源。凡是声明在externals 中的第三方依赖包，都不会被打包。 示例代码 123456789config.set('externals', &#123; vue: 'Vue', 'vue-router': 'VueRouter', axios: 'axios', lodash: '_', echarts: 'echarts', nprogress: 'NProgress', 'vue-quill-editor': 'VueQuillEditor'&#125;) 然后需要在public 下面的index.html中 使用cdn引入对应的资源 !!!重点 参考配置 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647module.exports = &#123; // 基本路径 baseUrl: '/', // 输出文件目录 outputDir: 'dist', // eslint-loader 是否在保存的时候检查 lintOnSave: true, // webpack配置 chainWebpack: () =&gt; &#123; &#125;, configureWebpack: () =&gt; &#123; &#125;, // 生产环境是否生成 sourceMap 文件 productionSourceMap: true, // css相关配置 css: &#123; // 是否使用css分离插件 ExtractTextPlugin extract: true, // 开启 CSS source maps? sourceMap: false, // css预设器配置项 loaderOptions: &#123;&#125;, // 启用 CSS modules for all css / pre-processor files. modules: false &#125;, parallel: require('os').cpus().length &gt; 1, pwa: &#123;&#125;, // webpack-dev-server 相关配置 devServer: &#123; open: true, //配置自动启动浏览器 host: 'localhost', port: 8080, // 端口号 https: false, hotOnly: false, // https:&#123;type:Boolean&#125; proxy: &#123; // 配置跨域 '/api':&#123; target:'http://xxx.xx.xxx.xxx:8080', //源地址 changeOrigin:true, //改变源 ws:true, //是否代理websockets pathRewrite:&#123; '^/api':'' &#125; &#125; &#125;, // 配置跨域处理,只有一个代理 before: app =&gt; &#123; &#125; &#125;, // 第三方插件配置 pluginOptions: &#123;&#125;&#125; 5.通过 CDN 优化 ElementUI 的打包虽然在开发阶段，我们启用了 element-ui 组件的按需加载，尽可能的减少了打包的体积，但是那些被按需加载的组件，还是占用了较大的文件体积。此时，我们可以将 element-ui 中的组件，也通过 CDN 的形式来加载，这样能够进一步减小打包后的文件体积。 具体操作流程如下： ① 在 main-prod.js 中，注释掉 element-ui 按需加载的代码 ② 在 index.html 的头部区域中，通过 CDN 加载 element-ui 的 js 和 css 样式 12345&lt;!-- element-ui 的样式表文件 --&gt;&lt;link rel=\"stylesheet\" href=\"https://cdn.staticfile.org/element-ui/2.8.2/themechalk/index.css\" /&gt;&lt;!-- element-ui 的 js 文件 --&gt;&lt;script src=\"https://cdn.staticfile.org/element-ui/2.8.2/index.js\"&gt;&lt;/script&gt; 6.首页内容定制不同的打包环境下，首页内容可能会有所不同。我们可以通过插件的方式进行定制，插件配置如下 12345678910111213141516171819202122chainWebpack: config =&gt; &#123; config.when(process.env.NODE_ENV === 'production', config =&gt; &#123; config.plugin('html').tap(args =&gt; &#123; args[0].isProd = true return args &#125;)&#125;)config.when(process.env.NODE_ENV === 'development', config =&gt; &#123; config.plugin('html').tap(args =&gt; &#123; args[0].isProd = false return args &#125;)&#125;)&#125;// 首页内容定制// 在 public/index.html 首页中，可以根据 isProd 的值，来决定如何渲染页面结构：&lt;!– 按需渲染页面的标题 --&gt;&lt;title&gt;&lt;%= htmlWebpackPlugin.options.isProd ? '' : 'dev - ' %&gt;电商后台管理系统&lt;/title&gt;&lt;!– 按需加载外部的 CDN 资源 --&gt;&lt;% if(htmlWebpackPlugin.options.isProd) &#123; %&gt;&lt;!—通过 externals 加载的外部 CDN 资源--&gt;&lt;% &#125; %&gt; 7.路由懒加载当打包构建项目时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成 不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。 具体需要 3 步： ① 安装 @babel/plugin-syntax-dynamic-import 包。 ② 在 babel.config.js 配置文件中声明该插件 12345678910111213module.exports = &#123; presets: ['@vue/cli-plugin-babel/preset'], plugins: [ [ 'component', &#123; libraryName: 'element-ui', styleLibraryName: 'theme-chalk' &#125; ], '@babel/plugin-syntax-dynamic-import' // 这条是声明的 ]&#125; ③ 将路由改为按需加载的形式，示例代码如下： 12345const Foo = () =&gt; import(/* webpackChunkName: \"group-foo\" */ './Foo.vue')const Bar = () =&gt; import(/* webpackChunkName: \"group-foo\" */ './Bar.vue')const Baz = () =&gt; import(/* webpackChunkName: \"group-boo\" */ './Baz.vue') 关于路由懒加载的详细文档，可参考如下链接： https://router.vuejs.org/zh/guide/advanced/lazy-loading.html 8.使用pm2 管理应用 在服务器中安装pm2: npm i pm2 -g 启动项目:pm2 start 文件 查看运行项目:pm2 ls 重启项目:pm2 restart 文件名 停止项目:pm2 stop 文件名 删除项目:pm2 delete 文件名","categories":[],"tags":[]},{"title":"基于NeteaseCloudMusicApi的vue音乐播放器项目","slug":"基于NeteaseCloudMusicApi的vue音乐播放器项目","date":"2020-02-28T02:59:44.000Z","updated":"2020-03-03T13:54:35.970Z","comments":true,"path":"2020/02/28/基于NeteaseCloudMusicApi的vue音乐播放器项目/","link":"","permalink":"http://yalibook.com/2020/02/28/%E5%9F%BA%E4%BA%8ENeteaseCloudMusicApi%E7%9A%84vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B9%E7%9B%AE/","excerpt":"项目描述 本项目是基于网易云音乐API的QQ音乐播放器(ヽﾐ ´∀｀ﾐノ＜) 本项目只完成了基础的页面模板和功能,适合刚刚开始学习vue的新人进行扩展练习 项目完全按照自己的想法实现的,没有参考任何资料,所以写的比较low,有很大优化空间","text":"项目描述 本项目是基于网易云音乐API的QQ音乐播放器(ヽﾐ ´∀｀ﾐノ＜) 本项目只完成了基础的页面模板和功能,适合刚刚开始学习vue的新人进行扩展练习 项目完全按照自己的想法实现的,没有参考任何资料,所以写的比较low,有很大优化空间 项目技术栈1vue,vuex,vueRoter,scss,axios 项目地址1https:&#x2F;&#x2F;github.com&#x2F;sroxck&#x2F;vue-music 网易云音乐APiNeteaseCloudMusicApi 项目截图))) 运行项目 首先需要开启网易云音乐API服务,请先下载NeteaseCloudMusicApi并开启服务 打开本项目 npm install 运行服务 npm run serve 访问 localhost:8080 查看服务","categories":[],"tags":[]},{"title":"使用git管理项目,推送到github远程仓库","slug":"使用git管理项目,推送到github远程仓库","date":"2020-02-27T05:39:55.000Z","updated":"2020-03-03T13:54:50.512Z","comments":true,"path":"2020/02/27/使用git管理项目,推送到github远程仓库/","link":"","permalink":"http://yalibook.com/2020/02/27/%E4%BD%BF%E7%94%A8git%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE,%E6%8E%A8%E9%80%81%E5%88%B0github%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/","excerpt":"准备工作: git软件,github账户","text":"准备工作: git软件,github账户 第一步:在命令行中cd到项目所在目录,或者shift+鼠标右键在项目根目录打开命令行 1cd C:\\xxx\\xxx\\xxx 第二步:在当面目录下执行如下命令 1git init // 初始化git仓库 第三步:关联远程仓库 123git remote add origin url// origin是远程仓库url的别称,之后可以直接使用这个别称// url 是要推送到的仓库地址,推荐使用ssh秘钥形式,免密登录 第四步:把代码提交到暂存区 12git add .// 此操作将有过更改的所有文件都添加进暂存区等待提交 第五步:提交代码到本地仓库 1git commit -m '提交信息' 第六步: 推送到远程仓库 12git push -u origin mastar// -u参数代表记住本次推送配置,之后推送直接git push即可","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://yalibook.com/tags/git/"}]},{"title":"微信小程序组件入门初识组件","slug":"微信小程序组件入门初识组件","date":"2020-02-26T13:29:30.000Z","updated":"2020-03-03T13:55:05.507Z","comments":true,"path":"2020/02/26/微信小程序组件入门初识组件/","link":"","permalink":"http://yalibook.com/2020/02/26/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6%E5%85%A5%E9%97%A8%E5%88%9D%E8%AF%86%E7%BB%84%E4%BB%B6/","excerpt":"标签组件 view标签 类似于div标签,有一个特殊属性hover-class=&quot;&quot; 鼠标移入时添加某个类","text":"标签组件 view标签 类似于div标签,有一个特殊属性hover-class=&quot;&quot; 鼠标移入时添加某个类 text标签 只能嵌套text标签,在小程序中,只有这个标签可以长按文字复制,需要添加selectable属性,添加decode属性,可以对空格,回车进行编码 image标签 图片标签,image组件默认宽度320px,高度240px 语法: &lt;image src=&quot;路径&quot;&gt; 属性: mode 决定图片内容如何和图片标签宽高做适配, 默认值: scaleToFill 不保持比例缩放,让图片完成拉伸至填满image元素 可选值:aspectFit 保持宽高比,保证图片的长的一边能充满image元素,页面轮播图常用属性 可选值:aspectFill 保持宽高比,保证图片的短的一边能充满image元素,比较少用 可选值:widthFix 相当于web中图片的模式,宽度指定后,高度会按比例来调整 比较常用 小程序中的图片,支持懒加载,在标签中加入lazy-load属性即可,当图片出现在视口的上下三屏的高度之内的时候,开始加载图片 swiper标签 微信内置的轮播图组件 轮播图外层容器使用 swiper 每一个轮播项使用 swiper-item swiper标签存在默认样式width: 100% height: 150px swiper高度无法实现由内容撑开 使用原图的宽高,等比例给swiper定宽高 算法: swiper宽度 / swiper 高度 = 原图宽度 / 原图高度 二次算法: swiper高度 = swiper宽度 * 原图高度 / 原图宽度 三次算法: swiper高 = 100vw * 原图高 / 原图宽 autoplay 自动播放 interval 图片切换间隔时间 circular 无缝轮播 indicator-dots 显示小圆点指示器 indicator-color 小圆点的颜色 indicator-active-color 小圆点选中的颜色 navigator标签 导航组件,类似超链接标签 使用url属性规定跳转到哪个页面 nacigator是块级标签 target属性规定跳转到当前的小程序还是其他小程序,默认self,在本小程序上跳转,miniPProgram 跳转到其他小程序 open-type跳转的方式 navigate 默认值 保留当前页面,跳转到应用内的某个页面,不能跳转到tabBar页面 redirect 关闭当前页面,跳转到应用内的某个页面,不能跳转到tabBar页面 switchTab 跳转到tabBar页面,并关闭其他所有非tabBar页面 reLaunch 关闭所有页面,打开到应用内的某个页面,可以随便跳转 navigateBack 关闭当前页面,返回上一级页面或多级页面,可通过getCurrentPages()获取当前的页面栈,决定要返回几层 exit 退出小程序,target=&quot;miniPProgram&quot;时生效 rich-text标签 富文本标签,可以将字符串解析成对应标签,类似vue中的v-html功能 通过nodes属性来实现 接收标签字符串 最常用 接收对象数组 button标签 外观属性 size控制按钮的大小 值:default,mini, type控制按钮的类型 值:default=&gt;灰色,primary=&gt;绿色,warn=&gt;红色 plain控制按钮是否镂空 值: false,true loading是否在按钮前面添加等待图标 值: false,true 开放属性 contact 直接打开 客服对话功能 需要在微信小程序的后台配置 只能够通过真机调试来打开 share 转发当前的小程序 到微信朋友中 不能把小程序 分享到 朋友圈 getPhoneNumber 获取当前用户的手机号码信息 结合一个事件来使用 不是企业的小程序账号 没有权限来获取用户的手机号码 1 绑定一个事件 bindgetphonenumber 2 在事件的回调函数中 通过参数来获取信息 3 获取到的信息 已经加密过了 getUserInfo 获取当前用户的个人信息 1 使用方法 类似 获取用户的手机号码 2 可以直接获取 不存在加密的字段 launchApp 在小程序当中 直接打开 app 1 需要现在 app中 通过app的某个链接 打开 小程序 2 在小程序 中 再通过 这个功能 重新打开 app 3 找到 京东的app 和 京东的小程序 openSetting 打开小程序内置的 授权页面 授权页面中 只会出现 用户曾经点击过的 权限 feedback 打开 小程序内置的 意见反馈页面 只能够通过真机调试来打开 icon标签 小程序中的字体图标 type: 图标的类型 有效值: &#39;success&#39;, &#39;success_no_circle&#39;, &#39;info&#39;, &#39;warn&#39;, &#39;waiting&#39;, &#39;cancel&#39;, &#39;download&#39;, &#39;search&#39;, &#39;clear&#39; size: 图标的大小 有效值: 数值,默认23 color: 图标的颜色 radio标签 radio标签必须要和父元素radio-group配合使用 value:选中的单选框的值 需要给radio-group绑定change事件","categories":[],"tags":[]},{"title":"新版博客上线啦!","slug":"新版博客上线啦","date":"2020-02-22T04:33:19.000Z","updated":"2020-03-04T04:38:22.240Z","comments":true,"path":"2020/02/22/新版博客上线啦/","link":"","permalink":"http://yalibook.com/2020/02/22/%E6%96%B0%E7%89%88%E5%8D%9A%E5%AE%A2%E4%B8%8A%E7%BA%BF%E5%95%A6/","excerpt":"","text":"本博客搬家啦!旧版WordPress博客不更新也不维护了,实在是太慢了,回归hexo的怀抱 本来也考虑使用vuePress 毕竟现在也在做vue技术栈,但是为了更骚气一点,还是使用了hexo ,毕竟插件多嘛~ 旧版博客的内容就不都搬运过来了,会挑一些有用的弄过来 相对来说是个全新的博客啦,也算是对于裸辞后的我的一种全新开始!要继续努力,加油!记录压力,与鸭梨一起成长","categories":[],"tags":[]}]}